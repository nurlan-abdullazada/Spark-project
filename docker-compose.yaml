version: '3.8'
services:
  spark-master:
    container_name: spark-master
    deploy:
        resources:
            limits:
              cpus: '1'
              memory: "2g"
    build:
      context: ./Spark
    ports:
      - "4040:4040"
      - "7077:7077"
      - "8080:8080"
      - "18080:18080"
    networks:
      - spark-net
    command: sh spark-master.sh

  spark-worker:
    deploy:
        resources:
            limits:
              cpus: '1'
              memory: "2g"
    build:
      context: ./Spark
    depends_on:
      - spark-master
    ports:
      - "8081-8089:8081"
    networks:
      - spark-net
    command: sh spark-worker.sh

  spark-client:
    container_name: spark-client
    deploy:
        resources:
            limits:
              cpus: '1'
              memory: "2g"
    build:
      context: ./spark-client
    ports:
      - "8888:8888"
      - "4041:4040"
    networks:
      - spark-net
    volumes:
      - ./spark_client/examples:/opt/examples

# S3 compatible object storage: MinIO
  minio:
    container_name: minio
    deploy:
        resources:
            limits:
              cpus: '1'
              memory: "2g"
    image: "minio/minio:RELEASE.2023-05-04T21-44-30Z"
    volumes:
      - minio:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - spark-net
    environment:
      MINIO_ACCESS_KEY: "telcoaz"
      MINIO_SECRET_KEY: "Telco12345"
    command: server /data --console-address ":9001"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://127.0.0.1:9000/minio/health/live" ]
      interval: 30s
      timeout: 20s
      retries: 3


# Zookeeper (required for Kafka)
  zookeeper:
    container_name: zookeeper
    image: confluentinc/cp-zookeeper:7.4.0
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - spark-net

  # Kafka Broker
  kafka:
    container_name: kafka
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9094:9094"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081
    networks:
      - spark-net

  # Schema Registry (for Avro schemas)
  schema-registry:
    container_name: schema-registry
    image: confluentinc/cp-schema-registry:7.4.0
    depends_on:
      - kafka
    ports:
      - "8085:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'kafka:29092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    networks:
      - spark-net

  # PostgreSQL Database
  postgres:
    container_name: postgres
    image: postgres:14-alpine
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: sparkuser
      POSTGRES_PASSWORD: sparkpass
      POSTGRES_DB: sparkdb
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db:/docker-entrypoint-initdb.d
    networks:
      - spark-net

  # PostgreSQL Admin Interface (optional but helpful)
  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4:latest
    ports:
      - "5050:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    networks:
      - spark-net

volumes:
   minio:
      driver: local
   postgres_data:
      driver: local

networks:
  spark-net:
    external: true